{"version":3,"sources":["components/NewWich.js","App.js","serviceWorker.js","index.js"],"names":["useState","mainsText","setMainsText","condimentsText","setCondimentsText","breadText","setBreadText","Accordion","Card","bg","Header","Toggle","as","Button","eventKey","Collapse","Body","Form","onSubmit","body","JSON","stringify","mains","split","condiments","bread","fetch","method","headers","Group","controlId","Label","Control","rows","placeholder","onChange","event","target","value","type","App","wiches","setWiches","wichNumber","setWichNumber","wichText","setWichText","swipeClicked","posVote","sand_id","useEffect","then","response","json","data","console","log","catch","err","length","wich","text","i","id","className","NewWich","variant","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0511d5c8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Card, Button, Accordion, Form } from 'react-bootstrap';\n\n\n\nexport default () => {\n\n  const [mainsText, setMainsText] = useState(\"\")\n  const [condimentsText, setCondimentsText] = useState(\"\")\n  const [breadText, setBreadText] = useState(\"\")\n\n  const submitClicked = () => {\n    const body = JSON.stringify({\n      mains: mainsText.split(/\\r?\\n/),\n      condiments: condimentsText.split(/\\r?\\n/),\n      bread: breadText,\n    })\n    const headers = { \"Content-type\": \"application/json; charset=UTF-8\" }\n\n    fetch('/api/addwich', { method: \"PUT\", body: body, headers: headers })\n  }\n\n  return (\n    <Accordion>\n      <Card bg=\"secondary\" >\n        <Card.Header>\n          <Accordion.Toggle as={Button} eventKey=\"0\">\n            Add a sandwich\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Body>\n            <Form onSubmit={submitClicked}>\n              <Form.Group controlId=\"mains\">\n                <Form.Label>Sandwich Mains (eg turkey, swiss cheese, peanut butter):</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"4\"\n                  placeholder=\"Please enter each main on a new line without punctuation\"\n                  onChange={(event) => setMainsText(event.target.value)}>\n                </Form.Control>\n              </Form.Group>\n              <Form.Group controlId=\"extras\">\n                <Form.Label>Sandwich Extras/Condiments (eg pickles, mustard, sauce):</Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"4\"\n                  placeholder=\"Please enter each condiment on a new line without punctuation\"\n                  onChange={(event) => setCondimentsText(event.target.value)}>\n                </Form.Control>\n              </Form.Group>\n              <Form.Group controlId=\"bread\">\n                <Form.Label>Bread</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"What kind of bread is your sandwich on?\"\n                  onChange={(event) => setBreadText(event.target.value)}>\n                </Form.Control>\n              </Form.Group>\n              <Button type=\"submit\">Submit your Sandwich!</Button>\n            </Form>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap'\nimport NewWich from './components/NewWich.js'\n\n\nfunction App() {\n\n  const [wiches, setWiches] = useState([])\n  const [wichNumber, setWichNumber] = useState(0)\n  const [wichText, setWichText] = useState(\"\")\n\n  const swipeClicked = (posVote) => {\n    const sand_id = wiches[wichNumber]['id']\n    // console.log('/votewich/' + sand_id + \"/\" + (posVote ? \"yes\" : \"no\"))\n    fetch('/api/votewich/' + sand_id + \"/\" + (posVote ? \"yes\" : \"no\"), { method: \"PUT\" })\n    setWichNumber(wichNumber + 1)\n  }\n\n  // gets list of sandwiches\n  useEffect(() => {\n    fetch('/api/getwich')\n      .then(response => response.json())\n      .then(data => setWiches(data))\n      .then(data => console.log(data))\n      .catch(err => console.log(err))\n  }, [])\n\n\n  //updates the wich text\n  useEffect(() => {\n    if (wiches.length > 0 && wichNumber < wiches.length) {\n      const wich = wiches[wichNumber]\n      var text = \"A \"\n      for (var i = 0; i < wich['mains'].length; i++) {\n        text += wich['mains'][i] + \" \"\n        if (i < wich['mains'].length - 1) {\n          text += \"and \"\n        }\n      }\n      text += \"sandwich with \"\n      for (i = 0; i < wich['condiments'].length; i++) {\n        text += wich['condiments'][i] + \" \"\n        if (i < wich['condiments'].length - 1) {\n          text += \"and \"\n        }\n      }\n      text += \"on \"\n      text += wich['bread'] + \".\"\n      setWichText(text)\n    }\n  })\n\n  if (wiches.length === 0) {\n    return (\n      <div id=\"not-loading\">\n        Hey\n      </div>\n    )\n  }\n\n  if (wichNumber === wiches.length) {\n    return (\n      <div className=\"App\" id=\"no-more-wiches\">\n        <NewWich />\n        <p>You've swiped on every sandwich! There's no more to show you. </p>\n      </div>\n    )\n  }\n\n\n  return (\n    <div className=\"App\">\n      <NewWich />\n      <br />\n      <br />\n      <p>{wichText}</p>\n      <Button variant=\"outline-danger\" onClick={() => swipeClicked(false)}>Yucky. Swipe Left!</Button>\n      <Button variant=\"outline-success\" onClick={() => swipeClicked(true)}>I'd eat that. Swipe Right!</Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}